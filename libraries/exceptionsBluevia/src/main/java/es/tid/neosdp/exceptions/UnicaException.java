/*
 * neoSDP (API management layer for Telefonica enablers)
 * Copyright (c) 2012 Telefonica I+D
 */
package es.tid.neosdp.exceptions;

import java.util.List;

/**
 * UnicaException bean
 * 
 * @author Ana Junquera (anajf@tid.es)
 * @author David Vicente (dvicente@full-on-net.com)
 * @author Jorge Lorenzo (jorgelg@tid.es)
 */
public class UnicaException {

	/**
	 * Category of the exception: SVR, SVC
	 */
	private String category;
	
	/**
	 * Identifier of the exception
	 */
	private String id;
	
	/**
	 * Verbose description of the exception
	 */
	private String text;
	
	/**
	 * List with the arguments which may provide additional information to the exception text.
	 * These are put into the % arguments of the error text.
	 */
	private List<String> parameters;
	
	/**
	 * HTTP response code for the exception
	 */
	private int responseCode;
	
	/**
	 * Separator used to build the categoryId of the unica exception
	 */
	public static final Character SEPARATOR = '_';
	
	/**
	 * List with the variables which may provide additional information to the exception.
	 * These only are used into soap message. These are put into the variable elements and point out
	 * to the %1, %2 arguments of the error text.
	 */
	private List<String> variables;
	
	/**
	 * Fault trace generated by the apigee gateway
	 */
	private String apigeeFaultTrace;

	/**
	 * Fault code generated by the apigee gateway
	 */
	private int apigeeFaultCode;
	
	/**
	 * Get the variables which enrich the exception. This list might be null or empty. This list is only used when soap representation.
	 * 
	 * @return
	 */
	public List<String> getVariables() {
		return variables;
	}

	/**
	 * Set the variables which enrich the exception
	 * 
	 * @param variables
	 */
	public void setVariables(List<String> variables) {
		this.variables = variables;
	}

	
	/**
	 * Constructor.
	 * 
	 * @param categoryId
	 */
	public UnicaException(final String categoryId) {
		this.setCategoryId(categoryId);
	}

	/**
	 * Get the category of the exception
	 * 
	 * @return
	 */
	public String getCategory() {
		return category;
	}

	/**
	 * Set the category of the exception
	 * 
	 * @param category
	 */
	public void setCategory(String category) {
		this.category = category;
	}

	/**
	 * Get the exception identifier classified by the category
	 * 
	 * @return
	 */
	public String getId() {
		return id;
	}

	/**
	 * Set the exception identifier
	 * 
	 * @param id
	 */
	public void setId(String id) {
		this.id = id;
	}

	/**
	 * Get the exception message
	 * 
	 * @return
	 */
	public String getText() {
		return text;
	}

	/**
	 * Set the exception message
	 * 
	 * @param text
	 */
	public void setText(String text) {
		this.text = text;
	}

	/**
	 * Get the variables which enrich the exception text. This list might be null or empty.
	 * 
	 * @return
	 */
	public List<String> getParameters() {
		return parameters;
	}

	/**
	 * Set the parameters which enrich the exception text
	 * 
	 * @param parameters
	 */
	public void setParameters(List<String> parameters) {
		this.parameters = parameters;
	}

	/**
	 * Get the HTTP response code associated to this exception
	 * 
	 * @return
	 */
	public int getResponseCode() {
		return responseCode;
	}

	/**
	 * Set the HTTP response code associated to this exception
	 * 
	 * @param responseCode
	 */
	public void setResponseCode(int responseCode) {
		this.responseCode = responseCode;
	}
	
	/**
	 * Set the HTTP response code associated to this exception converting the response code
	 * from string to integer. If this conversion fails, the response code is set to 500.
	 * 
	 * @param responseCode
	 */
	public void setResponseCode(String responseCode) {
		try {
			this.responseCode = Integer.parseInt(responseCode);
		} catch (NumberFormatException e) {
			this.responseCode = 500;
		}
	}

	/**
	 * Get the exception category and id in format: category_id
	 * If the category or id are null, then it is returned null
	 * 
	 * @return
	 */
	public String getCategoryId() {
		if (this.getCategory() != null && this.getId() != null)
			return this.getCategory() + SEPARATOR + this.getId();
		else
			return null;
	}
	
	/**
	 * Set the category and id from a string with the format: category_id.
	 * If the exception does not follow this format, then category and id are set to null
	 * 
	 * @param categoryId
	 */
	public void setCategoryId(final String categoryId) {
		if (categoryId != null) {
			int index = categoryId.indexOf(SEPARATOR);
			if (index > 0) {
				this.setCategory(categoryId.substring(0, index));
				this.setId(categoryId.substring(index + 1));
			} else {
				this.setCategory(null);
				this.setId(null);
			}
		}
	}
	
	/**
	 * Return the exception text replacing all the variables (%1, %2, ...) with its value from parameters list
	 * 
	 * @return
	 */
	public String getTextMergingParameters() {
		String mergedExceptionText = this.getText();
		if (this.parameters != null)
			for (int i=0; i<this.parameters.size(); i++)
				mergedExceptionText = mergedExceptionText.replace("%" + (i + 1), this.parameters.get(i));
		
		return mergedExceptionText;
	}

	
    /**
     * @return the apigeeFaultTrace
     */
    public String getApigeeFaultTrace() {
    	return apigeeFaultTrace;
    }

	
    /**
     * @param apigeeFaultTrace the apigeeFaultTrace to set
     */
    public void setApigeeFaultTrace(String apigeeFaultTrace) {
    	this.apigeeFaultTrace = apigeeFaultTrace;
    }

    /**
     * @return the apigeeFaultCode
     */
    public int getApigeeFaultCode() {
    	return apigeeFaultCode;
    }
	
    /**
     * @param apigeeFaultCode the apigeeFaultCode to set
     */
    public void setApigeeFaultCode(int apigeeFaultCode) {
    
    	this.apigeeFaultCode = apigeeFaultCode;
    }

}